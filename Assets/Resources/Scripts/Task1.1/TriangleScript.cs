using System.Collections;
using System.Collections.Generic;
using UnityEngine;


[RequireComponent(typeof(MeshFilter))]
[RequireComponent(typeof(MeshRenderer))]

[ExecuteInEditMode]
public class TriangleScript : MonoBehaviour
{
    [Header("Disabler")]
    [SerializeField] private bool removeMesh = false;


    [Header("Enabler")]
    [SerializeField] private bool genTriangle = false;


    [SerializeField] private Vector3 size = Vector3.one;
    
    [Header("Material Color")]
    [SerializeField] private int colorChoice;
    [SerializeField] private Color[] colors = { Color.green, Color.red, Color.white, Color.blue, Color.cyan, Color.black, Color.grey};

    private List<Material> materialList;

    // Update is called once per frame
    void OnValidate()
    {
        if (removeMesh)
        {
            genTriangle = false;
        }
        if (removeMesh || genTriangle)
        {
            GenerateTriangle();
        }
        
    }

    private void GenerateTriangle()
    {

        //1. initialise mesh filter
        MeshFilter meshFilter = this.GetComponent<MeshFilter>();

        //2. initialise mesh builder
        MeshGenerator meshGenerator = new MeshGenerator(1);

        //3. build our triangle if genTriangle is true else remove triangle if false
        if (genTriangle)
        {
            

            Vector3 p0 = new Vector3(size.x, size.y, -size.z);
            Vector3 p1 = new Vector3(-size.x, size.y, -size.z);
            Vector3 p2 = new Vector3(-size.x, size.y, size.z);

            meshGenerator.BuildTriangle(p0, p1, p2, 0);

            //5. initialise mesh renderer and assign material list to the mesh renderer's materials list
            MeshRenderer meshRenderer = this.GetComponent<MeshRenderer>();
            AddMaterials();
            meshRenderer.materials = materialList.ToArray();
        }
        else if (removeMesh)
        {
            
            Vector3 p0 = new Vector3(0, 0, 0);
            Vector3 p1 = new Vector3(0, 0, 0);
            Vector3 p2 = new Vector3(0, 0, 0);

            meshGenerator.BuildTriangle(p0, p1, p2, 0);
        }

        //4. mesh filter's mesh to the one generated by the mesh builder
        meshFilter.mesh = meshGenerator.CreateMesh();

         
    }

    private void AddMaterials()
    {
        if (colorChoice < colors.Length)
        {
            Material matColor = new Material(Shader.Find("Specular"));
            matColor.color = colors[colorChoice];
            materialList = new List<Material>();
            materialList.Add(matColor);
        }
        else 
        {
            colorChoice = colors.Length - 1;
        }

    }

}
